// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const ProductCreate = `-- name: ProductCreate :one
INSERT INTO products (name, price, stock)
VALUES ($1, $2, $3)
RETURNING id, name, price, stock
`

type ProductCreateParams struct {
	Name  string         `db:"name" json:"name"`
	Price pgtype.Numeric `db:"price" json:"price"`
	Stock int32          `db:"stock" json:"stock"`
}

func (q *Queries) ProductCreate(ctx context.Context, arg ProductCreateParams) (*Product, error) {
	row := q.db.QueryRow(ctx, ProductCreate, arg.Name, arg.Price, arg.Stock)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
	)
	return &i, err
}

const ProductDelete = `-- name: ProductDelete :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) ProductDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, ProductDelete, id)
	return err
}

const ProductGet = `-- name: ProductGet :one
SELECT id, name, price, stock
FROM products
WHERE id = $1
`

func (q *Queries) ProductGet(ctx context.Context, id int32) (*Product, error) {
	row := q.db.QueryRow(ctx, ProductGet, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
	)
	return &i, err
}

const ProductUpdateStock = `-- name: ProductUpdateStock :exec
UPDATE products
SET stock = $2
WHERE id = $1
`

type ProductUpdateStockParams struct {
	ID    int32 `db:"id" json:"id"`
	Stock int32 `db:"stock" json:"stock"`
}

func (q *Queries) ProductUpdateStock(ctx context.Context, arg ProductUpdateStockParams) error {
	_, err := q.db.Exec(ctx, ProductUpdateStock, arg.ID, arg.Stock)
	return err
}
